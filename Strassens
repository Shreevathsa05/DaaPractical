import numpy as np

def add(A,B):return A+B
def sub(A,B):return A-B
def strassen(A, B):
    n=int(A.shape[0])
    if n==1:
        return A*B
    k=n//2
    A11,A12,A21,A22=A[:k,:k],A[k:,:k],A[:k,k:],A[k:,k:]
    B11,B12,B21,B22=B[:k,:k],B[k:,:k],B[:k,k:],B[k:,k:]

    P=strassen(add(A11,A22),add(B11,B22))
    Q=strassen(B11,add(A21,A22))
    R=strassen(A11,sub(B12,B22))
    S=strassen(A22,sub(B21,B11))
    T=strassen(B22,add(A11,A12))
    U=strassen(add(A21,A11),add(B11,B22))
    V=strassen(add(B21,B22),sub(A12,A22))

    C11=P+S-T+V
    C12=R+T
    C21=Q+S
    C22=P+R-Q+U

    top=np.hstack((C11,C12))
    bottom=np.hstack((C21,C22))
    return np.vstack((top,bottom))

n=int(input("Enter the size of the matrix (must be a power of 2): "))

A = np.zeros((n, n), dtype=int)
B = np.zeros((n, n), dtype=int)
for i in range(n):
    for j in range(n):
        A[i][j]=int(input(f"Enter element A[{i}][{j}]: "))
for i in range(n):
    for j in range(n):
        B[i][j]=int(input(f"Enter element B[{i}][{j}]: "))
strassen_result = strassen(A, B)
print("Result of Strassen's multiplication:")
print(strassen_result)
